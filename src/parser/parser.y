%scanner                ./Scanner.h
%scanner-token-function d_scanner.lex()

%union{
double		d;
std::string*	s;
}

%token <d> 	DOUBLE
%token <s> 	STRING

%token INIT
%token SERVER
%token LP
%token RP

%token ACD AM BDR BP BAM BD BR BS BSM BSA BW CBC CP CAL CAW CM CADW CDEFW CDELW
CIW CMD CMPC CMW CRW CWS CO COP CWR CW CR DAS DPR DBT ED EDT EIN EIT EI EM EHT
ES FKO FC FDP FE FKF FSP FWP FL FR GLC GLD GLDIR GLF GLFN GLV GL GOW GW GMM GG
HT HD HI HM IM K KL KLD KLDIR LKF KLFN KLG KS KW KOW KPR KR KRFL KRFR KM LF LDF
LT MBTP MAXDA MDP MGK MTP MAXM MAXNA MAXNM MAXP MINDA MINDP MINM MINNA MINNM
MINP NEH NNH OAAS OKM OP OCH PAMK PBSW PCMP PDX PMET PMGDX PNK PRW PRWA PSW PTW
PSO PAM PD PR PS PSM PSMM PW PTB PTD P PFL PFR PROF PGK QS QSL RM RD RDT RI
RMIN RS RCP SCCM SCMS SMS SM SS SVS SBS SDR SIMS SDF SOTFLT SOTFRT SC SIM SMAX
SGL SGR SBV SMICS SMOD  SO SSO TBD TC TD TE TPR TRF TW TAN TLS TRS TLC TLD
TLDIR TLF TLFN TL UO V VA VD WA WD WF WN WR WRA

%%

start:
    init | server ;

double:	DOUBLE {$$.d = atof(d_scanner->matched().c_str());} ;
string:	STRING {$$.s = new std::string(d_scanner->matched().c_str());} ;

server:	LP SERVER r1 RP {cout << "end of server_param" << endl;};

r1: acd r2 | r2;
r2: am  r3 | r3;
r3: bdr r4 | r4;
r4: bp  r5 | r5;
r5: bam r6 | r6;
r6: bd  r7 | r7;
r7: br  r8 | r8;
r8: bs  r9 | r9;
r9: bsm r10| r10;
r10: bsa r11 | r11;
r11: bw  r12 | r12;
r12: cbc r13 | r13;
r13: cp  r14 | r14;
r14: cal r15 | r15;
r15: caw r16 | r16;
r16: cm  r17 | r17;
r17: cadw r18 | r18;
r18: cdefw r19 | r19;
r19: cdelw r20 | r20;
r20: ciw r21 | r21;
r21: cmd r22 | r22;
r22: cmpc r23 | r23;
r23: cmw r24 | r24;
r24: crw r25 | r25;
r25: cws r26 | r26;
r26: co r27 | r27;
r27: cop r28 | r28;
r28: cwr r29 | r29;
r29: cw r30 | r30;
r30: cr r31 | r31;
r31: das r32 | r32;
r32: dpr r33 | r33;
r33: dbt r34 | r34;
r34: ed r35 | r35;
r35: edt r36 | r36;
r36: ein r37 | r37;
r37: eit r38 | r38;
r38: ei r39 | r39;
r39: em r40 | r40;
r40: eht r41 | r41;
r41: es r42 | r42;
r42: fko r43 | r43;
r43: fc r44 | r44;
r44: fdp r45 | r45;
r45: fe r46 | r46;
r46: fkf r47 | r47;
r47: fsp r48 | r48;
r48: fwp r49 | r49;
r49: fl r50 | r50;
r50: fr r51 | r51;
r51: glc r52 | r52;
r52: gld r53 | r53;
r53: gldir r54 | r54;
r54: glf r55 | r55;
r55: glfn r56 | r56;
r56: glv r57 | r57;
r57: gl r58 | r58;
r58: gow r59 | r59;
r59: gw r60 | r60;
r60: gmm r61 | r61;
r61: gg r62 | r62;
r62: ht r63 | r63;
r63: hd r64 | r64;
r64: hi r65 | r65;
r65: hm r66 | r66;
r66: im r67| r67;
r67: k r68 | r68;
r68: kl r69 | r69;
r69: kld r70 | r70;
r70: kldir r71 | r71;
r71: lkf r72 | r72 ;
r72: klfn r73 | r73;
r73: klg r74 | r74;
r74: ks r75 | r75;
r75: kw r76 | r76;
r76: kow r77 | r77;
r77: kpr r78 | r78;
r78: kr r79 | r79;
r79: krfl r80 | r80;
r80: krfr r81 | r81;
r81: km r82 | r82;
r82: lf r83 | r83;
r83: ldf r84 | r84;
r84: lt r85 | r85;
r85: mbtp r86 | r86;
r86: maxda r87 | r87;
r87: mdp r88 | r88;
r88: mgk r89 | r89;
r89: mtp r90 | r90;
r90: maxm r91 | r91;
r91: maxna r92 | r92;
r92: maxnm r93 | r93;
r93: maxp r94 | r94;
r94: minda r95 | r95;
r95: mindp r96 | r96;
r96: minm r97 | r97;
r97: minna r98 | r98;
r98: minnm r99 | r99;
r99: minp r100 | r100;
r100: neh r101 | r101;
r101: nnh r102 | r102;
r102: oaas r103 | r103;
r103: okm r104 | r104;
r104: op r105 | r105;
r105: och r106 | r106;
r106: pamk r107 | r107;
r107: pbsw r108 | r108;
r108: pcmp r109 | r109;
r109: pdx r110 | r110;
r110: pmet r111 | r111;
r111: pmgdx r112 | r112;
r112: pnk r113 | r113;
r113: prw r114 | r114;
r114: prwa r115 | r115;
r115: psw r116 | r116;
r116: ptw r117 | r117;
r117: pso r118 | r118;
r118: pam r119 | r119;
r119: pd r120 | r120;
r120: pr r121 | r121;
r121: ps r122 | r122;
r122: psm r123 | r123;
r123: psmm r124 | r124;
r124: pw r125 | r125;
r125: ptb r126 | r126;
r126: ptd r127 | r127;
r127: p r128 | r128;
r128: pfl r129 | r129;
r129: pfr r130 | r130;
r130: prof r131 | r131;
r131: pgk r132 | r132;
r132: qs r133 | r133;
r133: qsl r134 | r134;
r134: rm r135 | r135;
r135: rd r136 | r136;
r136: rdt r137 | r137;
r137: ri r138 | r138;
r138: rmin r139 | r139;
r139: rs r140 | r140;
r140: rcp r141 | r141;
r141: sccm r142 | r142;
r142: scms r143 | r143;
r143: sms r144 | r144;
r144: sm r145 | r145;
r145: ss r146 | r146;
r146: svs r147 | r147;
r147: sbs r148 | r148;
r148: sdr r149 | r149;
r149: sims r150 | r150;
r150: sdf r151 | r151;
r151: sotflt r152 | r152;
r152: sotfrt r153 | r153;
r153: sc r154 | r154;
r154: sim r155 | r155;
r155: smax r156 | r156;
r156: sgl r157 | r157;
r157: sgr r158 | r158;
r158: sbv r159 | r159;
r159: smics r160 | r160;
r160: smod r161 | r161;
r161: so r162 | r162;
r162: sso r163 | r163;
r163: tbd r164 | r164;
r164: tc r165 | r165;
r165: td r166 | r166;
r166: te r167 | r167;
r167: tpr r168 | r168;
r168: trf r169 | r169;
r169: tw r170 | r170;
r170: tan r171 | r171;
r171: tls r172 | r172;
r172: trs r173 | r173;
r173: tlc r174 | r174;
r174: tld r175 | r175;
r175: tldir r176 | r176;
r176: tlf r177 | r177;
r177: tlfn r178 | r178;
r178: tl r179 | r179;
r179: uo r180 | r180;
r180: v r181 | r181;
r181: va r182 | r182;
r182: vd r183 | r183;
r183: wa r184 | r184;
r184: wd r185 | r185;
r185: wf r186 | r186;
r186: wn r187 | r187;
r187: wr r188 | r188;
r188: wra | ;


acd:	LP ACD double RP {parent->model.server.audio_cut_dist = $3.d;} ;
am:	LP AM double RP {parent->model.server.auto_mode = ($3.d==0?false:true);} ;
bdr:	LP BDR double RP {parent->model.server.back_dash_rate = $3.d;} ;
bp:	LP BP double RP {parent->model.server.back_passes = static_cast<bool>($3.d);} ;
bam:	LP BAM double RP {parent->model.server.ball_accel_max = $3.d;} ;
bd:	LP BD double RP {parent->model.server.ball_decay = $3.d;} ;
br:	LP BR double RP {parent->model.server.ball_rand = $3.d;} ;
bs:	LP BS double RP {parent->model.server.ball_size = $3.d;} ;
bsm:	LP BSM double RP {parent->model.server.ball_speed_max = $3.d;} ;
bsa:	LP BSA double RP {parent->model.server.ball_stuck_area = $3.d;} ;
bw:	LP BW double RP {parent->model.server.ball_weight = $3.d;} ;
cbc:	LP CBC double RP {parent->model.server.catch_ban_cycle = static_cast<int>($3.d);} ;
cp:	LP CP double RP {parent->model.server.catch_probability = $3.d;} ;
cal:	LP CAL double RP {parent->model.server.catchable_area_l = $3.d;} ;
caw:	LP CAW double RP {parent->model.server.catchable_area_w = $3.d;} ;
cm:	LP CM double RP {parent->model.server.ckick_margin = $3.d;} ;
cadw:	LP CADW double RP {parent->model.server.clang_advice_win = static_cast<int>($3.d);} ;
cdefw:	LP CDEFW double RP {parent->model.server.clang_define_win = static_cast<int>($3.d);} ;
cdelw:	LP CDELW double RP {parent->model.server.clang_del_win = static_cast<int>($3.d);} ;
ciw:	LP CIW double RP {parent->model.server.clang_info_win = static_cast<int>($3.d);} ;
cmd:	LP CMD double RP {parent->model.server.clang_mess_delay = static_cast<int>($3.d);} ;
cmpc:	LP CMPC double RP {parent->model.server.clang_mess_per_cycle = static_cast<int>($3.d);} ;
cmw:	LP CMW double RP {parent->model.server.clang_meta_win = static_cast<int>($3.d);} ;
crw:	LP CRW double RP {parent->model.server.clang_rule_win = static_cast<int>($3.d);} ;
cws:	LP CWS double RP {parent->model.server.clang_win_size = static_cast<int>($3.d);} ;
co:	LP CO double RP {parent->model.server.coach = ($3.d==0?false:true);} ;
cop:	LP COP double RP {parent->model.server.coach_port = static_cast<int>($3.d);} ;
cwr:	LP CWR double RP {parent->model.server.coach_w_referee = ($3.d==0?false:true);} ;
cw:	LP CW double RP {parent->model.server.connect_wait = static_cast<int>($3.d);} ;
cr:	LP CR double RP {parent->model.server.control_radius = $3.d;} ;
das:	LP DAS double RP {parent->model.server.dash_angle_step = $3.d;} ;
dpr:	LP DPR double RP {parent->model.server.dash_power_rate = $3.d;} ;
dbt:	LP DBT double RP {parent->model.server.drop_ball_time = static_cast<int>($3.d);} ;
ed:	LP ED double RP {parent->model.server.effort_dec = ($3.d);} ;
edt:	LP EDT double RP {parent->model.server.effort_dec_thr = ($3.d);} ;
ein:	LP EIN double RP {parent->model.server.effort_inc = ($3.d);} ;
eit:	LP EIT double RP {parent->model.server.effort_inc_thr = ($3.d);} ;
ei:	LP EI double RP {parent->model.server.effort_init = ($3.d);} ;
em:	LP EM double RP {parent->model.server.effort_min = ($3.d);} ;
eht:	LP EHT double RP {parent->model.server.extra_half_time = static_cast<int>($3.d);} ;
es:	LP ES double RP {parent->model.server.extra_stamina = ($3.d);} ;
fko:	LP FKO double RP {parent->model.server.forbid_kick_off_offside = static_cast<bool>($3.d);} ;
fc:	LP FC double RP {parent->model.server.foul_cycles = static_cast<int>($3.d);} ;
fdp:	LP FDP double RP {parent->model.server.foul_detect_probability = $3.d;} ;
fe:	LP FE double RP {parent->model.server.foul_exponent = $3.d;} ;
fkf:	LP FKF double RP {parent->model.server.free_kick_faults = static_cast<bool>($3.d);} ;
fsp:	LP FSP double RP {parent->model.server.freeform_send_period = static_cast<unsigned int>($3.d);} ;
fwp:	LP FWP double RP {parent->model.server.freeform_wait_period = static_cast<unsigned int>($3.d);} ;
fl:	LP FL double RP {parent->model.server.fullstate_l = static_cast<int>($3.d);} ;
fr:	LP FR double RP {parent->model.server.fullstate_r = static_cast<int>($3.d);} ;
glc:	LP GLC double RP {parent->model.server.game_log_compression = static_cast<int>($3.d);} ;
gld:	LP GLD double RP {parent->model.server.game_log_dated = static_cast<int>($3.d);} ;
gldir:	LP GLDIR string RP {parent->model.server.game_log_dir = *($3.s);} ;
glf:	LP GLF double RP {parent->model.server.game_log_fixed= static_cast<bool>($3.d);} ;
glfn:	LP GLFN string RP {parent->model.server.game_log_fixed_name = *($3.s);} ;
glv:	LP GLV double RP {parent->model.server.game_log_version = static_cast<int>($3.d);} ;
gl:	LP GL double RP {parent->model.server.game_logging = static_cast<bool>($3.d);} ;
gow:	LP GOW double RP {parent->model.server.game_over_wait = static_cast<int>($3.d);} ;
gw:	LP GW double RP {parent->model.server.goal_width = ($3.d);} ;
gmm:	LP GMM double RP {parent->model.server.goalie_max_moves = static_cast<int>($3.d);} ;
gg:	LP GG double RP {parent->model.server.golden_goal = static_cast<bool>($3.d);} ;
ht:	LP HT double RP {parent->model.server.half_time = static_cast<int>($3.d);} ;
hd:	LP HD double RP {parent->model.server.hear_decay = static_cast<unsigned int>($3.d);} ;
hi:	LP HI double RP {parent->model.server.hear_inc = static_cast<unsigned int>($3.d);} ;
hm:	LP HM double RP {parent->model.server.hear_max = static_cast<unsigned int>($3.d);} ;
im:	LP IM double RP {parent->model.server.inertia_moment = ($3.d);} ;
k:	LP K double RP {parent->model.server.keepaway = static_cast<bool>($3.d);} ;
kl:	LP KL double RP {parent->model.server.keepaway_length = ($3.d);} ;
kld:	LP KLD double RP {parent->model.server.keepaway_log_dated = static_cast<bool>($3.d);} ;
kldir:	LP KLDIR string RP {parent->model.server.keepaway_log_dir = *($3.s);} ;
lkf:	LP LKF double RP {parent->model.server.keepaway_log_fixed = static_cast<bool>($3.d);} ;
klfn:	LP KLFN string RP {parent->model.server.keepaway_log_fixed_name = *($3.s);} ;
klg:	LP KLG double RP {parent->model.server.keepaway_logging = static_cast<bool>($3.d);} ;
ks:	LP KS double RP {parent->model.server.keepaway_start = static_cast<int>($3.d);} ;
kw:	LP KW double RP {parent->model.server.keepaway_width = ($3.d);} ;
kow:	LP KOW double RP {parent->model.server.kick_off_wait = static_cast<int>($3.d);} ;
kpr:	LP KPR double RP {parent->model.server.kick_power_rate = ($3.d);} ;
kr:	LP KR double RP {parent->model.server.kick_rand = ($3.d);} ;
krfl:	LP KRFL double RP {parent->model.server.kick_rand_factor_l = ($3.d);} ;
krfr:	LP KRFR double RP {parent->model.server.kick_rand_factor_r = ($3.d);} ;
km:	LP KM double RP {parent->model.server.kickable_margin = ($3.d);} ;
lf:	LP LF string RP {parent->model.server.landmark_file = *($3.s);} ;
ldf:	LP LDF string RP {parent->model.server.log_date_format = *($3.s);} ;
lt:	LP LT double RP {parent->model.server.log_times = static_cast<int>($3.d);} ;
mbtp:	LP MBTP double RP {parent->model.server.max_back_tackle_power = ($3.d);} ;
maxda:	LP MAXDA double RP {parent->model.server.max_dash_angle = ($3.d);} ;
mdp:	LP MDP double RP {parent->model.server.max_dash_power = ($3.d);} ;
mgk:	LP MGK double RP {parent->model.server.max_goal_kicks = static_cast<int>($3.d);} ;
mtp:	LP MTP double RP {parent->model.server.max_tackle_power = ($3.d);} ;
maxm:	LP MAXM double RP {parent->model.server.maxmoment = ($3.d);} ;
maxna:	LP MAXNA double RP {parent->model.server.maxneckang = ($3.d);} ;
maxnm:	LP MAXNM double RP {parent->model.server.maxneckmoment = ($3.d);} ;
maxp:	LP MAXP double RP {parent->model.server.maxpower = ($3.d);} ;
minda:	LP MINDA double RP {parent->model.server.min_dash_angle = ($3.d);} ;
mindp:	LP MINDP double RP {parent->model.server.min_dash_power = ($3.d);} ;
minm:	LP MINM double RP {parent->model.server.minmoment = ($3.d);} ;
minna:	LP MINNA double RP {parent->model.server.minneckang = ($3.d);} ;
minnm:	LP MINNM double RP {parent->model.server.minneckmoment = ($3.d);} ;
minp:	LP MINP double RP {parent->model.server.minpower = ($3.d);} ;
neh:	LP NEH double RP {parent->model.server.nr_extra_halfs = static_cast<int>($3.d);} ;
nnh:	LP NNH double RP {parent->model.server.nr_normal_halfs = static_cast<int>($3.d);} ;
oaas:	LP OAAS double RP {parent->model.server.offside_active_area_size = ($3.d);} ;
okm:	LP OKM double RP {parent->model.server.offside_kick_margin = ($3.d);} ;
op:	LP OP double RP {parent->model.server.olcoach_port = static_cast<int>($3.d);} ;
och:	LP OCH double RP {parent->model.server.old_coach_hear = static_cast<bool>($3.d);} ;
pamk:	LP PAMK double RP {parent->model.server.pen_allow_mult_kicks = static_cast<bool>($3.d);} ;
pbsw:	LP PBSW double RP {parent->model.server.pen_before_setup_wait = static_cast<bool>($3.d);} ;
pcmp:	LP PCMP double RP {parent->model.server.pen_coach_moves_players = static_cast<bool>($3.d);} ;
pdx:	LP PDX double RP {parent->model.server.pen_dist_x = ($3.d);} ;
pmet:	LP PMET double RP {parent->model.server.pen_max_extra_kicks = static_cast<int>($3.d);} ;
pmgdx:	LP PMGDX double RP {parent->model.server.pen_max_goalie_dist_x = static_cast<int>($3.d);} ;
pnk:	LP PNK double RP {parent->model.server.pen_nr_kicks = static_cast<int>($3.d);} ;
prw:	LP PRW double RP {parent->model.server.pen_random_winner = static_cast<bool>($3.d);} ;
prwa:	LP PRWA double RP {parent->model.server.pen_ready_wait = static_cast<int>($3.d);} ;
psw:	LP PSW double RP {parent->model.server.pen_setup_wait = static_cast<int>($3.d);} ;
ptw:	LP PTW double RP {parent->model.server.pen_taken_wait = static_cast<int>($3.d);} ;
pso:	LP PSO double RP {parent->model.server.penalty_shoot_outs = static_cast<bool>($3.d);} ;
pam:	LP PAM double RP {parent->model.server.player_accel_max = ($3.d);} ;
pd:	LP PD double RP {parent->model.server.player_decay = ($3.d);} ;
pr:	LP PR double RP {parent->model.server.player_rand = ($3.d);} ;
ps:	LP PS double RP {parent->model.server.player_size = ($3.d);} ;
psm:	LP PSM double RP {parent->model.server.player_speed_max = ($3.d);} ;
psmm:	LP PSMM double RP {parent->model.server.player_speed_max_min = ($3.d);} ;
pw:	LP PW double RP {parent->model.server.player_weight = ($3.d);} ;
ptb:	LP PTB double RP {parent->model.server.point_to_ban = static_cast<int>($3.d);} ;
ptd:	LP PTD double RP {parent->model.server.point_to_duration = static_cast<int>($3.d);} ;
p:	LP P double RP {parent->model.server.port = static_cast<int>($3.d);} ;
pfl:	LP PFL double RP {parent->model.server.prand_factor_l = ($3.d);} ;
pfr:	LP PFR double RP {parent->model.server.prand_factor_r = ($3.d);} ;
prof:	LP PROF double RP {parent->model.server.profile = static_cast<bool>($3.d);} ;
pgk:	LP PGK double RP {parent->model.server.proper_goal_kicks = static_cast<bool>($3.d);} ;
qs:	LP QS double RP {parent->model.server.quantize_step = ($3.d);} ;
qsl:	LP QSL double RP {parent->model.server.quantize_step_l = ($3.d);} ;
rm:	LP RM double RP {parent->model.server.record_messages = static_cast<bool>($3.d);} ;
rd:	LP RD double RP {parent->model.server.recover_dec = ($3.d);} ;
rdt:	LP RDT double RP {parent->model.server.recover_dec_thr = ($3.d);} ;
ri:	LP RI double RP {parent->model.server.recover_init = ($3.d);} ;
rmin:	LP RMIN double RP {parent->model.server.recover_min = ($3.d);} ;
rs:	LP RS double RP {parent->model.server.recv_step = static_cast<int>($3.d);} ;
rcp:	LP RCP double RP {parent->model.server.red_card_probability = ($3.d);} ;
sccm:	LP SCCM double RP {parent->model.server.say_coach_cnt_max = static_cast<int>($3.d);} ;
scms:	LP SCMS double RP {parent->model.server.say_coach_msg_size = static_cast<int>($3.d);} ;
sms:	LP SMS double RP {parent->model.server.say_msg_size = static_cast<int>($3.d);} ;
sm:	LP SM double RP {parent->model.server.send_comms = static_cast<bool>($3.d);} ;
ss:	LP SS double RP {parent->model.server.send_step = static_cast<int>($3.d);} ;
svs:	LP SVS double RP {parent->model.server.send_vi_step = static_cast<int>($3.d);} ;
sbs:	LP SBS double RP {parent->model.server.sense_body_step = static_cast<int>($3.d);} ;
sdr:	LP SDR double RP {parent->model.server.side_dash_rate = ($3.d);} ;
sims:	LP SIMS double RP {parent->model.server.simulator_step = static_cast<int>($3.d);} ;
sdf:	LP SDF double RP {parent->model.server.slow_down_factor = static_cast<int>($3.d);} ;
sotflt:	LP SOTFLT double RP {parent->model.server.slowness_on_top_for_left_team = ($3.d);} ;
sotfrt:	LP SOTFRT double RP {parent->model.server.slowness_on_top_for_right_team = ($3.d);} ;
sc:	LP SC double RP {parent->model.server.stamina_capacity = ($3.d);} ;
sim:	LP SIM double RP {parent->model.server.stamina_inc_max = ($3.d);} ;
smax:	LP SMAX double RP {parent->model.server.stamina_max = ($3.d);} ;
sgl:	LP SGL double RP {parent->model.server.start_goal_l = static_cast<int>($3.d);} ;
sgr:	LP SGR double RP {parent->model.server.start_goal_r = static_cast<int>($3.d);} ;
sbv:	LP SBV double RP {parent->model.server.stopped_ball_vel = ($3.d);} ;
smics:	LP SMICS double RP {parent->model.server.synch_micro_sleep = static_cast<unsigned int>($3.d);} ;
smod:	LP SMOD double RP {parent->model.server.synch_mode = static_cast<bool>($3.d);} ;
so:	LP SO double RP {parent->model.server.synch_offset = static_cast<int>($3.d);} ;
sso:	LP SSO double RP {parent->model.server.synch_see_offset = static_cast<int>($3.d);} ;
tbd:	LP TBD double RP {parent->model.server.tackle_back_dist = ($3.d);} ;
tc:	LP TC double RP {parent->model.server.tackle_cycles = static_cast<unsigned int>($3.d);} ;
td:	LP TD double RP {parent->model.server.tackle_dist = ($3.d);} ;
te:	LP TE double RP {parent->model.server.tackle_exponent = ($3.d);} ;
tpr:	LP TPR double RP {parent->model.server.tackle_power_rate = ($3.d);} ;
trf:	LP TRF double RP {parent->model.server.tackle_rand_factor = ($3.d);} ;
tw:	LP TW double RP {parent->model.server.tackle_width = ($3.d);} ;
tan:	LP TAN double RP {parent->model.server.team_actuator_noise = static_cast<bool>($3.d);} ;
tls:	LP TLS string RP {parent->model.server.team_l_start = *($3.s);} ;
trs:	LP TRS string RP {parent->model.server.team_r_start = ($3.d);} ;
tlc:	LP TLC double RP {parent->model.server.text_log_compression = static_cast<int>($3.d);} ;
tld:	LP TLD double RP {parent->model.server.text_log_dated = static_cast<int>($3.d);} ;
tldir:	LP TLDIR string RP {parent->model.server.text_log_dir = *($3.s);} ;
tlf:	LP TLF double RP {parent->model.server.text_log_fixed = static_cast<int>($3.d);} ;
tlfn:	LP TLFN string RP {parent->model.server.text_log_fixed_name = *($3.s);} ;
tl:	LP TL double RP {parent->model.server.text_logging = static_cast<bool>($3.d);} ;
uo:	LP UO double RP {parent->model.server.use_offside = static_cast<bool>($3.d);} ;
v:	LP V double RP {parent->model.server.verbose = static_cast<bool>($3.d);} ;
va:	LP VA double RP {parent->model.server.visible_angle = ($3.d);} ;
vd:	LP VD double RP {parent->model.server.visible_distance = ($3.d);} ;
wa:	LP WA double RP {parent->model.server.wind_ang = ($3.d);} ;
wd:	LP WD double RP {parent->model.server.wind_dir = ($3.d);} ;
wf:	LP WF double RP {parent->model.server.wind_force = ($3.d);} ;
wn:	LP WN double RP {parent->model.server.wind_none = static_cast<bool>($3.d);} ;
wr:	LP WR double RP {parent->model.server.wind_rand = ($3.d);} ;
wra:	LP WRA double RP {parent->model.server.wind_random = ($3.d);} ;

init:	LP INIT RP {cout << "I can see an init!" << endl;};
