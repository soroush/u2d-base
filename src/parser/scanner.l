%%
[ \t\n]+		// skip white space chars.
"-"?[[:alnum:]]+("."[[:alnum:]]+)?	return Parser::DOUBLE;
"\"".*"\""              return Parser::STRING;
"init"/[ ]		return Parser::INIT;
"(" 			return Parser::LP;
")" 			return Parser::RP;
"server_param" 		return Parser::SERVER;
"audio_cut_dist"	return Parser::ACD;
"auto_mode"		return Parser::AM;
"back_dash_rate"	return Parser::BDR;
"back_passes"		return Parser::BP;
"ball_accel_max"	return Parser::BAM;
"ball_decay"		return Parser::BD;
"ball_rand"		return Parser::BR;
"ball_size"		return Parser::BS;
"ball_speed_max"	return Parser::BSM;
"ball_stuck_area"	return Parser::BSA;
"ball_weight"		return Parser::BW;
"catch_ban_cycle"	return Parser::CBC;
"catch_probability"	return Parser::CP;
"catchable_area_l"	return Parser::CAL;
"catchable_area_w"	return Parser::CAW;
"ckick_margin"          return Parser::CM;
"clang_advice_win"      return Parser::CADW;
"clang_define_win"      return Parser::CDEFW;
"clang_del_win"         return Parser::CDELW;
"clang_info_win"        return Parser::CIW;
"clang_mess_delay"      return Parser::CMD;
"clang_mess_per_cycle"  return Parser::CMPC;
"coach"/[^"_"]          return Parser::CO;
"coach_port"            return Parser::COP;
"coach_w_referee"	return Parser::CWR;
"clang_meta_win"        return Parser::CMW;
"clang_rule_win"        return Parser::CRW;
"clang_win_size"        return Parser::CWS;
"connect_wait"          return Parser::CW;
"control_radius"        return Parser::CR;
"dash_angle_step" 	return Parser::DAS;
"dash_power_rate"	return Parser::DPR;
"drop_ball_time"	return Parser::DBT;
"effort_dec"            return Parser::ED;
"effort_dec_thr"	return Parser::EDT;
"effort_inc"            return Parser::EIN;
"effort_inc_thr"	return Parser::EIT;
"effort_init"           return Parser::EI;
"effort_min"            return Parser::EM;
"extra_half_time"	return Parser::EHT;
"extra_stamina"         return Parser::ES;
"forbid_kick_off_offside"	return Parser::FKO;
"foul_cycles"           return Parser::FC;
"foul_detect_probability"	return Parser::FDP;
"foul_exponent"         return Parser::FE;
"free_kick_faults"	return Parser::FKF;
"freeform_send_period"	return Parser::FSP;
"freeform_wait_period"	return Parser::FWP;
"fullstate_l"           return Parser::FL;
"fullstate_r"           return Parser::FR;
"game_log_compression"	return Parser::GLC;
"game_log_dated"	return Parser::GLD;
"game_log_dir"          return Parser::GLDIR;
"game_log_fixed"	return Parser::GLF;
"game_log_fixed_name"	return Parser::GLFN;
"game_log_version"	return Parser::GLV;
"game_logging"		return Parser::GL;
"game_over_wait"	return Parser::GOW;
"goal_width"		return Parser::GW;
"goalie_max_moves"	return Parser::GMM;
"golden_goal"		return Parser::GG;
"half_time"		return Parser::HT;
"hear_decay"        	return Parser::HD;
"hear_inc"              return Parser::HI;
"hear_max"              return Parser::HM;
"inertia_moment"	return Parser::IM;

"keepaway"/[ ]          return Parser::K;
"keepaway_length"	return Parser::KL;
"keepaway_log_dated"	return Parser::KLD;
"keepaway_log_dir"	return Parser::KLDIR;
"keepaway_log_fixed"	return Parser::LKF;
"keepaway_log_fixed_name"	return Parser::KLFN;
"keepaway_logging"	return Parser::KLG;
"keepaway_start"	return Parser::KS;
"keepaway_width"	return Parser::KW;
"kick_off_wait"         return Parser::KOW;
"kick_power_rate"	return Parser::KPR;
"kick_rand"             return Parser::KR;
"kick_rand_factor_l"	return Parser::KRFL;
"kick_rand_factor_r"	return Parser::KRFR;
"kickable_margin"	return Parser::KM;
"landmark_file"         return Parser::LF;
"log_date_format"	return Parser::LDF;
"log_times"             return Parser::LT;
"max_back_tackle_power"	return Parser::MBTP;
"max_dash_angle"	return Parser::MAXDA;
"max_dash_power"	return Parser::MDP;
"max_goal_kicks"	return Parser::MGK;
"max_tackle_power"	return Parser::MTP;
"maxmoment"/[ ]         return Parser::MAXM;
"maxneckang"/[ ]        return Parser::MAXNA;
"maxneckmoment"/[ ]     return Parser::MAXNM;
"maxpower"/[ ]          return Parser::MAXP;
"min_dash_angle"	return Parser::MINDA;
"min_dash_power"	return Parser::MINDP;
"minmoment"/[ ]         return Parser::MINM;
"minneckang"/[ ]        return Parser::MINNA;
"minneckmoment"/[ ]     return Parser::MINNM;
"minpower"/[ ]          return Parser::MINP;
"nr_extra_halfs"	return Parser::NEH;
"nr_normal_halfs"	return Parser::NNH;
"offside_active_area_size"	return Parser::OAAS;
"offside_kick_margin"	return Parser::OKM;
"olcoach_port"          return Parser::OP;
"old_coach_hear"	return Parser::OCH;
"pen_allow_mult_kicks"	return Parser::PAMK;
"pen_before_setup_wait"	return Parser::PBSW;
"pen_coach_moves_players"	return Parser::PCMP;
"pen_dist_x"            return Parser::PDX;
"pen_max_extra_kicks"	return Parser::PMET;
"pen_max_goalie_dist_x"	return Parser::PMGDX;
"pen_nr_kicks"          return Parser::PNK;
"pen_random_winner"	return Parser::PRW;
"pen_ready_wait"	return Parser::PRWA;
"pen_setup_wait"	return Parser::PSW;
"pen_taken_wait"	return Parser::PTW;
"penalty_shoot_outs"	return Parser::PSO;
"player_accel_max"	return Parser::PAM;
"player_decay"          return Parser::PD;
"player_rand"           return Parser::PR;
"player_size"           return Parser::PS;
"player_speed_max"	return Parser::PSM;
"player_speed_max_min"	return Parser::PSMM;
"player_weight"         return Parser::PW;
"point_to_ban"          return Parser::PTB;
"point_to_duration"	return Parser::PTD;
"port"/[ ]              return Parser::P;
"prand_factor_l"	return Parser::PFL;
"prand_factor_r"	return Parser::PFR;
"profile"/[ ]           return Parser::PROF;
"proper_goal_kicks"	return Parser::PGK;
"quantize_step"         return Parser::QS;
"quantize_step_l"	return Parser::QSL;
"record_messages"	return Parser::RM;
"recover_dec"           return Parser::RD;
"recover_dec_thr"	return Parser::RDT;
"recover_init"          return Parser::RI;
"recover_min"           return Parser::RMIN;
"recv_step"             return Parser::RS;
"red_card_probability"	return Parser::RCP;
"say_coach_cnt_max"	return Parser::SCCM;
"say_coach_msg_size"	return Parser::SCMS;
"say_msg_size"          return Parser::SMS;
"send_comms"            return Parser::SM; // Should be SC in fact!
"send_step"             return Parser::SS;
"send_vi_step"          return Parser::SVS;
"sense_body_step"	return Parser::SBS;
"side_dash_rate"	return Parser::SDR;
"simulator_step"	return Parser::SIMS;
"slow_down_factor"	return Parser::SDF;
"slowness_on_top_for_left_team"         return Parser::SOTFLT;
"slowness_on_top_for_right_team"	return Parser::SOTFRT;
"stamina_capacity"	return Parser::SC;
"stamina_inc_max"	return Parser::SIM;
"stamina_max"           return Parser::SMAX;
"start_goal_l"          return Parser::SGL;
"start_goal_r"          return Parser::SGR;
"stopped_ball_vel"	return Parser::SBV;
"synch_micro_sleep"	return Parser::SMICS;
"synch_mode"            return Parser::SMOD;
"synch_offset"          return Parser::SO;
"synch_see_offset"	return Parser::SSO;
"tackle_back_dist"	return Parser::TBD;
"tackle_cycles"         return Parser::TC;
"tackle_dist"           return Parser::TD;
"tackle_exponent"	return Parser::TE;
"tackle_power_rate"	return Parser::TPR;
"tackle_rand_factor"	return Parser::TRF;
"tackle_width"          return Parser::TW;
"team_actuator_noise"	return Parser::TAN;
"team_l_start"          return Parser::TLS;
"team_r_start"          return Parser::TRS;
"text_log_compression"	return Parser::TLC;
"text_log_dated"	return Parser::TLD;
"text_log_dir"          return Parser::TLDIR;
"text_log_fixed"	return Parser::TLF;
"text_log_fixed_name"	return Parser::TLFN;
"text_logging"          return Parser::TL;
"use_offside"           return Parser::UO;
"verbose"/[ ]           return Parser::V;
"visible_angle"         return Parser::VA;
"visible_distance"	return Parser::VD;
"wind_ang"      	return Parser::WA;
"wind_dir"      	return Parser::WD;
"wind_force"        	return Parser::WF;
"wind_none"     	return Parser::WN;
"wind_rand"             return Parser::WR;
"wind_random"       	return Parser::WRA;
